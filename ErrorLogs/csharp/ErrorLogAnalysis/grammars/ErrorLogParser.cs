//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from grammars/ErrorLog.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class ErrorLogParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, NULL=2, DASHES=3, DOT=4, COMMA=5, AMP=6, TICK=7, DASH=8, STAR=9, 
		BANG=10, GT=11, LT=12, SINGLE_QUOTE=13, DOUBLE_QUOTE=14, BACK_SLASH=15, 
		SLASH=16, SEMI=17, QUESTION=18, PIPE=19, AT_SIGN=20, PERCENT=21, DOLLAR=22, 
		L_PAREN=23, R_PAREN=24, L_BRACKET=25, R_BRACKET=26, L_BRACE=27, R_BRACE=28, 
		COLON=29, EQUAL=30, NUMBER=31, MONTH=32, AM_PM=33, EXCEPTION_TYPE_LABEL=34, 
		ERROR_LABEL=35, STACK_TRACE_LABEL=36, INNNER_EXCEPTION_LABEL=37, IDENTIFIER=38, 
		EOL=39, WS=40;
	public const int
		RULE_logfile = 0, RULE_line = 1, RULE_logline = 2, RULE_datetime = 3, 
		RULE_day = 4, RULE_year = 5, RULE_hour = 6, RULE_minute = 7, RULE_skip_to_exception_type = 8, 
		RULE_skip_to_error_label = 9, RULE_exception_type = 10, RULE_error_and_stacktrace = 11, 
		RULE_error_message = 12, RULE_stack_trace = 13, RULE_method_signature = 14, 
		RULE_class_name = 15, RULE_method_name = 16, RULE_parameter_list = 17, 
		RULE_type = 18;
	public static readonly string[] ruleNames = {
		"logfile", "line", "logline", "datetime", "day", "year", "hour", "minute", 
		"skip_to_exception_type", "skip_to_error_label", "exception_type", "error_and_stacktrace", 
		"error_message", "stack_trace", "method_signature", "class_name", "method_name", 
		"parameter_list", "type"
	};

	private static readonly string[] _LiteralNames = {
		null, "'at'", "'NULL'", "'----------------------'", "'.'", "','", "'&'", 
		"'`'", "'-'", "'*'", "'!'", "'>'", "'<'", "'''", "'\"'", "'\\'", "'/'", 
		"';'", "'?'", "'|'", "'@'", "'%'", "'$'", "'('", "')'", "'['", "']'", 
		"'{'", "'}'", "':'", "'='", null, null, null, "'Exception Type:'", "'Error:'", 
		"'Stack Trace:'", "'*** Inner Exception ***'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "NULL", "DASHES", "DOT", "COMMA", "AMP", "TICK", "DASH", "STAR", 
		"BANG", "GT", "LT", "SINGLE_QUOTE", "DOUBLE_QUOTE", "BACK_SLASH", "SLASH", 
		"SEMI", "QUESTION", "PIPE", "AT_SIGN", "PERCENT", "DOLLAR", "L_PAREN", 
		"R_PAREN", "L_BRACKET", "R_BRACKET", "L_BRACE", "R_BRACE", "COLON", "EQUAL", 
		"NUMBER", "MONTH", "AM_PM", "EXCEPTION_TYPE_LABEL", "ERROR_LABEL", "STACK_TRACE_LABEL", 
		"INNNER_EXCEPTION_LABEL", "IDENTIFIER", "EOL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ErrorLog.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ErrorLogParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ErrorLogParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ErrorLogParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class LogfileContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(ErrorLogParser.Eof, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public LogfileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logfile; } }
		public override void EnterRule(IParseTreeListener listener) {
			IErrorLogListener typedListener = listener as IErrorLogListener;
			if (typedListener != null) typedListener.EnterLogfile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IErrorLogListener typedListener = listener as IErrorLogListener;
			if (typedListener != null) typedListener.ExitLogfile(this);
		}
	}

	[RuleVersion(0)]
	public LogfileContext logfile() {
		LogfileContext _localctx = new LogfileContext(Context, State);
		EnterRule(_localctx, 0, RULE_logfile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NULL || _la==DASHES) {
				{
				{
				State = 38; line();
				}
				}
				State = 43;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 44; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(ErrorLogParser.NULL, 0); }
		public LoglineContext logline() {
			return GetRuleContext<LoglineContext>(0);
		}
		public ITerminalNode EOL() { return GetToken(ErrorLogParser.EOL, 0); }
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			IErrorLogListener typedListener = listener as IErrorLogListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IErrorLogListener typedListener = listener as IErrorLogListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NULL:
				{
				State = 46; Match(NULL);
				}
				break;
			case DASHES:
				{
				State = 47; logline();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EOL) {
				{
				State = 50; Match(EOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoglineContext : ParserRuleContext {
		public ITerminalNode DASHES() { return GetToken(ErrorLogParser.DASHES, 0); }
		public DatetimeContext datetime() {
			return GetRuleContext<DatetimeContext>(0);
		}
		public Skip_to_exception_typeContext skip_to_exception_type() {
			return GetRuleContext<Skip_to_exception_typeContext>(0);
		}
		public ITerminalNode EXCEPTION_TYPE_LABEL() { return GetToken(ErrorLogParser.EXCEPTION_TYPE_LABEL, 0); }
		public Exception_typeContext exception_type() {
			return GetRuleContext<Exception_typeContext>(0);
		}
		public Skip_to_error_labelContext skip_to_error_label() {
			return GetRuleContext<Skip_to_error_labelContext>(0);
		}
		public ITerminalNode ERROR_LABEL() { return GetToken(ErrorLogParser.ERROR_LABEL, 0); }
		public Error_and_stacktraceContext error_and_stacktrace() {
			return GetRuleContext<Error_and_stacktraceContext>(0);
		}
		public LoglineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logline; } }
		public override void EnterRule(IParseTreeListener listener) {
			IErrorLogListener typedListener = listener as IErrorLogListener;
			if (typedListener != null) typedListener.EnterLogline(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IErrorLogListener typedListener = listener as IErrorLogListener;
			if (typedListener != null) typedListener.ExitLogline(this);
		}
	}

	[RuleVersion(0)]
	public LoglineContext logline() {
		LoglineContext _localctx = new LoglineContext(Context, State);
		EnterRule(_localctx, 4, RULE_logline);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53; Match(DASHES);
			State = 54; datetime();
			State = 55; skip_to_exception_type();
			State = 56; Match(EXCEPTION_TYPE_LABEL);
			State = 57; exception_type();
			State = 58; skip_to_error_label();
			State = 59; Match(ERROR_LABEL);
			State = 60; error_and_stacktrace();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatetimeContext : ParserRuleContext {
		public ITerminalNode MONTH() { return GetToken(ErrorLogParser.MONTH, 0); }
		public DayContext day() {
			return GetRuleContext<DayContext>(0);
		}
		public YearContext year() {
			return GetRuleContext<YearContext>(0);
		}
		public HourContext hour() {
			return GetRuleContext<HourContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(ErrorLogParser.COLON, 0); }
		public MinuteContext minute() {
			return GetRuleContext<MinuteContext>(0);
		}
		public ITerminalNode AM_PM() { return GetToken(ErrorLogParser.AM_PM, 0); }
		public DatetimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datetime; } }
		public override void EnterRule(IParseTreeListener listener) {
			IErrorLogListener typedListener = listener as IErrorLogListener;
			if (typedListener != null) typedListener.EnterDatetime(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IErrorLogListener typedListener = listener as IErrorLogListener;
			if (typedListener != null) typedListener.ExitDatetime(this);
		}
	}

	[RuleVersion(0)]
	public DatetimeContext datetime() {
		DatetimeContext _localctx = new DatetimeContext(Context, State);
		EnterRule(_localctx, 6, RULE_datetime);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; Match(MONTH);
			State = 63; day();
			State = 64; year();
			State = 65; hour();
			State = 66; Match(COLON);
			State = 67; minute();
			State = 68; Match(AM_PM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DayContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(ErrorLogParser.NUMBER, 0); }
		public DayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_day; } }
		public override void EnterRule(IParseTreeListener listener) {
			IErrorLogListener typedListener = listener as IErrorLogListener;
			if (typedListener != null) typedListener.EnterDay(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IErrorLogListener typedListener = listener as IErrorLogListener;
			if (typedListener != null) typedListener.ExitDay(this);
		}
	}

	[RuleVersion(0)]
	public DayContext day() {
		DayContext _localctx = new DayContext(Context, State);
		EnterRule(_localctx, 8, RULE_day);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YearContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(ErrorLogParser.NUMBER, 0); }
		public YearContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_year; } }
		public override void EnterRule(IParseTreeListener listener) {
			IErrorLogListener typedListener = listener as IErrorLogListener;
			if (typedListener != null) typedListener.EnterYear(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IErrorLogListener typedListener = listener as IErrorLogListener;
			if (typedListener != null) typedListener.ExitYear(this);
		}
	}

	[RuleVersion(0)]
	public YearContext year() {
		YearContext _localctx = new YearContext(Context, State);
		EnterRule(_localctx, 10, RULE_year);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HourContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(ErrorLogParser.NUMBER, 0); }
		public HourContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hour; } }
		public override void EnterRule(IParseTreeListener listener) {
			IErrorLogListener typedListener = listener as IErrorLogListener;
			if (typedListener != null) typedListener.EnterHour(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IErrorLogListener typedListener = listener as IErrorLogListener;
			if (typedListener != null) typedListener.ExitHour(this);
		}
	}

	[RuleVersion(0)]
	public HourContext hour() {
		HourContext _localctx = new HourContext(Context, State);
		EnterRule(_localctx, 12, RULE_hour);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinuteContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(ErrorLogParser.NUMBER, 0); }
		public MinuteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IErrorLogListener typedListener = listener as IErrorLogListener;
			if (typedListener != null) typedListener.EnterMinute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IErrorLogListener typedListener = listener as IErrorLogListener;
			if (typedListener != null) typedListener.ExitMinute(this);
		}
	}

	[RuleVersion(0)]
	public MinuteContext minute() {
		MinuteContext _localctx = new MinuteContext(Context, State);
		EnterRule(_localctx, 14, RULE_minute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Skip_to_exception_typeContext : ParserRuleContext {
		public ITerminalNode[] EXCEPTION_TYPE_LABEL() { return GetTokens(ErrorLogParser.EXCEPTION_TYPE_LABEL); }
		public ITerminalNode EXCEPTION_TYPE_LABEL(int i) {
			return GetToken(ErrorLogParser.EXCEPTION_TYPE_LABEL, i);
		}
		public Skip_to_exception_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skip_to_exception_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IErrorLogListener typedListener = listener as IErrorLogListener;
			if (typedListener != null) typedListener.EnterSkip_to_exception_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IErrorLogListener typedListener = listener as IErrorLogListener;
			if (typedListener != null) typedListener.ExitSkip_to_exception_type(this);
		}
	}

	[RuleVersion(0)]
	public Skip_to_exception_typeContext skip_to_exception_type() {
		Skip_to_exception_typeContext _localctx = new Skip_to_exception_typeContext(Context, State);
		EnterRule(_localctx, 16, RULE_skip_to_exception_type);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 78;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==EXCEPTION_TYPE_LABEL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 81;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Skip_to_error_labelContext : ParserRuleContext {
		public ITerminalNode[] ERROR_LABEL() { return GetTokens(ErrorLogParser.ERROR_LABEL); }
		public ITerminalNode ERROR_LABEL(int i) {
			return GetToken(ErrorLogParser.ERROR_LABEL, i);
		}
		public Skip_to_error_labelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_skip_to_error_label; } }
		public override void EnterRule(IParseTreeListener listener) {
			IErrorLogListener typedListener = listener as IErrorLogListener;
			if (typedListener != null) typedListener.EnterSkip_to_error_label(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IErrorLogListener typedListener = listener as IErrorLogListener;
			if (typedListener != null) typedListener.ExitSkip_to_error_label(this);
		}
	}

	[RuleVersion(0)]
	public Skip_to_error_labelContext skip_to_error_label() {
		Skip_to_error_labelContext _localctx = new Skip_to_error_labelContext(Context, State);
		EnterRule(_localctx, 18, RULE_skip_to_error_label);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 83;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==ERROR_LABEL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 86;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exception_typeContext : ParserRuleContext {
		public Class_nameContext class_name() {
			return GetRuleContext<Class_nameContext>(0);
		}
		public Exception_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exception_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IErrorLogListener typedListener = listener as IErrorLogListener;
			if (typedListener != null) typedListener.EnterException_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IErrorLogListener typedListener = listener as IErrorLogListener;
			if (typedListener != null) typedListener.ExitException_type(this);
		}
	}

	[RuleVersion(0)]
	public Exception_typeContext exception_type() {
		Exception_typeContext _localctx = new Exception_typeContext(Context, State);
		EnterRule(_localctx, 20, RULE_exception_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88; class_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Error_and_stacktraceContext : ParserRuleContext {
		public Error_messageContext error_message() {
			return GetRuleContext<Error_messageContext>(0);
		}
		public ITerminalNode STACK_TRACE_LABEL() { return GetToken(ErrorLogParser.STACK_TRACE_LABEL, 0); }
		public Stack_traceContext stack_trace() {
			return GetRuleContext<Stack_traceContext>(0);
		}
		public ITerminalNode[] INNNER_EXCEPTION_LABEL() { return GetTokens(ErrorLogParser.INNNER_EXCEPTION_LABEL); }
		public ITerminalNode INNNER_EXCEPTION_LABEL(int i) {
			return GetToken(ErrorLogParser.INNNER_EXCEPTION_LABEL, i);
		}
		public Error_and_stacktraceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error_and_stacktrace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IErrorLogListener typedListener = listener as IErrorLogListener;
			if (typedListener != null) typedListener.EnterError_and_stacktrace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IErrorLogListener typedListener = listener as IErrorLogListener;
			if (typedListener != null) typedListener.ExitError_and_stacktrace(this);
		}
	}

	[RuleVersion(0)]
	public Error_and_stacktraceContext error_and_stacktrace() {
		Error_and_stacktraceContext _localctx = new Error_and_stacktraceContext(Context, State);
		EnterRule(_localctx, 22, RULE_error_and_stacktrace);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; error_message();
			State = 91; Match(STACK_TRACE_LABEL);
			State = 92; stack_trace();
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INNNER_EXCEPTION_LABEL) {
				{
				{
				State = 93; Match(INNNER_EXCEPTION_LABEL);
				State = 95;
				ErrorHandler.Sync(this);
				_alt = 1+1;
				do {
					switch (_alt) {
					case 1+1:
						{
						{
						State = 94;
						MatchWildcard();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 97;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
				} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				}
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Error_messageContext : ParserRuleContext {
		public ITerminalNode[] STACK_TRACE_LABEL() { return GetTokens(ErrorLogParser.STACK_TRACE_LABEL); }
		public ITerminalNode STACK_TRACE_LABEL(int i) {
			return GetToken(ErrorLogParser.STACK_TRACE_LABEL, i);
		}
		public Error_messageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error_message; } }
		public override void EnterRule(IParseTreeListener listener) {
			IErrorLogListener typedListener = listener as IErrorLogListener;
			if (typedListener != null) typedListener.EnterError_message(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IErrorLogListener typedListener = listener as IErrorLogListener;
			if (typedListener != null) typedListener.ExitError_message(this);
		}
	}

	[RuleVersion(0)]
	public Error_messageContext error_message() {
		Error_messageContext _localctx = new Error_messageContext(Context, State);
		EnterRule(_localctx, 24, RULE_error_message);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			ErrorHandler.Sync(this);
			_alt = 1+1;
			do {
				switch (_alt) {
				case 1+1:
					{
					{
					State = 104;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==STACK_TRACE_LABEL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 107;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			} while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stack_traceContext : ParserRuleContext {
		public Method_signatureContext[] method_signature() {
			return GetRuleContexts<Method_signatureContext>();
		}
		public Method_signatureContext method_signature(int i) {
			return GetRuleContext<Method_signatureContext>(i);
		}
		public Stack_traceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stack_trace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IErrorLogListener typedListener = listener as IErrorLogListener;
			if (typedListener != null) typedListener.EnterStack_trace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IErrorLogListener typedListener = listener as IErrorLogListener;
			if (typedListener != null) typedListener.ExitStack_trace(this);
		}
	}

	[RuleVersion(0)]
	public Stack_traceContext stack_trace() {
		Stack_traceContext _localctx = new Stack_traceContext(Context, State);
		EnterRule(_localctx, 26, RULE_stack_trace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 109; Match(T__0);
				State = 110; method_signature();
				}
				}
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_signatureContext : ParserRuleContext {
		public Class_nameContext class_name() {
			return GetRuleContext<Class_nameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(ErrorLogParser.DOT, 0); }
		public Method_nameContext method_name() {
			return GetRuleContext<Method_nameContext>(0);
		}
		public Parameter_listContext parameter_list() {
			return GetRuleContext<Parameter_listContext>(0);
		}
		public Method_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			IErrorLogListener typedListener = listener as IErrorLogListener;
			if (typedListener != null) typedListener.EnterMethod_signature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IErrorLogListener typedListener = listener as IErrorLogListener;
			if (typedListener != null) typedListener.ExitMethod_signature(this);
		}
	}

	[RuleVersion(0)]
	public Method_signatureContext method_signature() {
		Method_signatureContext _localctx = new Method_signatureContext(Context, State);
		EnterRule(_localctx, 28, RULE_method_signature);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; class_name();
			State = 116; Match(DOT);
			State = 117; method_name();
			State = 118; parameter_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_nameContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(ErrorLogParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ErrorLogParser.IDENTIFIER, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(ErrorLogParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(ErrorLogParser.DOT, i);
		}
		public Class_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IErrorLogListener typedListener = listener as IErrorLogListener;
			if (typedListener != null) typedListener.EnterClass_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IErrorLogListener typedListener = listener as IErrorLogListener;
			if (typedListener != null) typedListener.ExitClass_name(this);
		}
	}

	[RuleVersion(0)]
	public Class_nameContext class_name() {
		Class_nameContext _localctx = new Class_nameContext(Context, State);
		EnterRule(_localctx, 30, RULE_class_name);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 120; Match(IDENTIFIER);
					State = 121; Match(DOT);
					}
					} 
				}
				State = 126;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			State = 127; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(ErrorLogParser.IDENTIFIER, 0); }
		public Method_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IErrorLogListener typedListener = listener as IErrorLogListener;
			if (typedListener != null) typedListener.EnterMethod_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IErrorLogListener typedListener = listener as IErrorLogListener;
			if (typedListener != null) typedListener.ExitMethod_name(this);
		}
	}

	[RuleVersion(0)]
	public Method_nameContext method_name() {
		Method_nameContext _localctx = new Method_nameContext(Context, State);
		EnterRule(_localctx, 32, RULE_method_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_listContext : ParserRuleContext {
		public ITerminalNode L_PAREN() { return GetToken(ErrorLogParser.L_PAREN, 0); }
		public ITerminalNode R_PAREN() { return GetToken(ErrorLogParser.R_PAREN, 0); }
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode[] IDENTIFIER() { return GetTokens(ErrorLogParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ErrorLogParser.IDENTIFIER, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(ErrorLogParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(ErrorLogParser.COMMA, i);
		}
		public Parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IErrorLogListener typedListener = listener as IErrorLogListener;
			if (typedListener != null) typedListener.EnterParameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IErrorLogListener typedListener = listener as IErrorLogListener;
			if (typedListener != null) typedListener.ExitParameter_list(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_listContext parameter_list() {
		Parameter_listContext _localctx = new Parameter_listContext(Context, State);
		EnterRule(_localctx, 34, RULE_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131; Match(L_PAREN);
			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 132; type();
				State = 133; Match(IDENTIFIER);
				State = 140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 134; Match(COMMA);
					State = 135; type();
					State = 136; Match(IDENTIFIER);
					}
					}
					State = 142;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 145; Match(R_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(ErrorLogParser.IDENTIFIER, 0); }
		public ITerminalNode AMP() { return GetToken(ErrorLogParser.AMP, 0); }
		public ITerminalNode TICK() { return GetToken(ErrorLogParser.TICK, 0); }
		public ITerminalNode NUMBER() { return GetToken(ErrorLogParser.NUMBER, 0); }
		public ITerminalNode L_BRACKET() { return GetToken(ErrorLogParser.L_BRACKET, 0); }
		public ITerminalNode R_BRACKET() { return GetToken(ErrorLogParser.R_BRACKET, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IErrorLogListener typedListener = listener as IErrorLogListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IErrorLogListener typedListener = listener as IErrorLogListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 36, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147; Match(IDENTIFIER);
			State = 153;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AMP:
				{
				State = 148; Match(AMP);
				}
				break;
			case TICK:
				{
				State = 149; Match(TICK);
				State = 150; Match(NUMBER);
				}
				break;
			case L_BRACKET:
				{
				State = 151; Match(L_BRACKET);
				State = 152; Match(R_BRACKET);
				}
				break;
			case IDENTIFIER:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '*', '\x9E', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x3', '\x2', '\a', '\x2', '*', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '-', '\v', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x33', '\n', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '\x36', '\n', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x6', '\n', 'R', 
		'\n', '\n', '\r', '\n', '\xE', '\n', 'S', '\x3', '\v', '\x6', '\v', 'W', 
		'\n', '\v', '\r', '\v', '\xE', '\v', 'X', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x6', '\r', 
		'\x62', '\n', '\r', '\r', '\r', '\xE', '\r', '\x63', '\a', '\r', '\x66', 
		'\n', '\r', '\f', '\r', '\xE', '\r', 'i', '\v', '\r', '\x3', '\xE', '\x6', 
		'\xE', 'l', '\n', '\xE', '\r', '\xE', '\xE', '\xE', 'm', '\x3', '\xF', 
		'\x3', '\xF', '\x6', '\xF', 'r', '\n', '\xF', '\r', '\xF', '\xE', '\xF', 
		's', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', '}', '\n', '\x11', 
		'\f', '\x11', '\xE', '\x11', '\x80', '\v', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', 
		'\x13', '\x8D', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\x90', '\v', 
		'\x13', '\x5', '\x13', '\x92', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x5', '\x14', '\x9C', '\n', '\x14', '\x3', '\x14', '\x6', 
		'S', 'X', '\x63', 'm', '\x2', '\x15', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '\x2', '\x5', '\x3', '\x2', '$', '$', '\x3', '\x2', 
		'%', '%', '\x3', '\x2', '&', '&', '\x2', '\x99', '\x2', '+', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x32', '\x3', '\x2', '\x2', '\x2', '\x6', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\b', '@', '\x3', '\x2', '\x2', '\x2', '\n', 
		'H', '\x3', '\x2', '\x2', '\x2', '\f', 'J', '\x3', '\x2', '\x2', '\x2', 
		'\xE', 'L', '\x3', '\x2', '\x2', '\x2', '\x10', 'N', '\x3', '\x2', '\x2', 
		'\x2', '\x12', 'Q', '\x3', '\x2', '\x2', '\x2', '\x14', 'V', '\x3', '\x2', 
		'\x2', '\x2', '\x16', 'Z', '\x3', '\x2', '\x2', '\x2', '\x18', '\\', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', 'k', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'q', '\x3', '\x2', '\x2', '\x2', '\x1E', 'u', '\x3', '\x2', '\x2', '\x2', 
		' ', '~', '\x3', '\x2', '\x2', '\x2', '\"', '\x83', '\x3', '\x2', '\x2', 
		'\x2', '$', '\x85', '\x3', '\x2', '\x2', '\x2', '&', '\x95', '\x3', '\x2', 
		'\x2', '\x2', '(', '*', '\x5', '\x4', '\x3', '\x2', ')', '(', '\x3', '\x2', 
		'\x2', '\x2', '*', '-', '\x3', '\x2', '\x2', '\x2', '+', ')', '\x3', '\x2', 
		'\x2', '\x2', '+', ',', '\x3', '\x2', '\x2', '\x2', ',', '.', '\x3', '\x2', 
		'\x2', '\x2', '-', '+', '\x3', '\x2', '\x2', '\x2', '.', '/', '\a', '\x2', 
		'\x2', '\x3', '/', '\x3', '\x3', '\x2', '\x2', '\x2', '\x30', '\x33', 
		'\a', '\x4', '\x2', '\x2', '\x31', '\x33', '\x5', '\x6', '\x4', '\x2', 
		'\x32', '\x30', '\x3', '\x2', '\x2', '\x2', '\x32', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '\x33', '\x35', '\x3', '\x2', '\x2', '\x2', '\x34', '\x36', 
		'\a', ')', '\x2', '\x2', '\x35', '\x34', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\x36', '\x3', '\x2', '\x2', '\x2', '\x36', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '\x38', '\a', '\x5', '\x2', '\x2', '\x38', '\x39', '\x5', 
		'\b', '\x5', '\x2', '\x39', ':', '\x5', '\x12', '\n', '\x2', ':', ';', 
		'\a', '$', '\x2', '\x2', ';', '<', '\x5', '\x16', '\f', '\x2', '<', '=', 
		'\x5', '\x14', '\v', '\x2', '=', '>', '\a', '%', '\x2', '\x2', '>', '?', 
		'\x5', '\x18', '\r', '\x2', '?', '\a', '\x3', '\x2', '\x2', '\x2', '@', 
		'\x41', '\a', '\"', '\x2', '\x2', '\x41', '\x42', '\x5', '\n', '\x6', 
		'\x2', '\x42', '\x43', '\x5', '\f', '\a', '\x2', '\x43', '\x44', '\x5', 
		'\xE', '\b', '\x2', '\x44', '\x45', '\a', '\x1F', '\x2', '\x2', '\x45', 
		'\x46', '\x5', '\x10', '\t', '\x2', '\x46', 'G', '\a', '#', '\x2', '\x2', 
		'G', '\t', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\a', '!', '\x2', '\x2', 
		'I', '\v', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\a', '!', '\x2', '\x2', 
		'K', '\r', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\a', '!', '\x2', '\x2', 
		'M', '\xF', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\a', '!', '\x2', '\x2', 
		'O', '\x11', '\x3', '\x2', '\x2', '\x2', 'P', 'R', '\n', '\x2', '\x2', 
		'\x2', 'Q', 'P', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'T', '\x3', '\x2', '\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', 
		'\x2', 'T', '\x13', '\x3', '\x2', '\x2', '\x2', 'U', 'W', '\n', '\x3', 
		'\x2', '\x2', 'V', 'U', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'Y', '\x3', '\x2', '\x2', '\x2', 'X', 'V', '\x3', '\x2', 
		'\x2', '\x2', 'Y', '\x15', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\x5', 
		' ', '\x11', '\x2', '[', '\x17', '\x3', '\x2', '\x2', '\x2', '\\', ']', 
		'\x5', '\x1A', '\xE', '\x2', ']', '^', '\a', '&', '\x2', '\x2', '^', 'g', 
		'\x5', '\x1C', '\xF', '\x2', '_', '\x61', '\a', '\'', '\x2', '\x2', '`', 
		'\x62', '\v', '\x2', '\x2', '\x2', '\x61', '`', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x63', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x3', '\x2', 
		'\x2', '\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x64', '\x66', 
		'\x3', '\x2', '\x2', '\x2', '\x65', '_', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'i', '\x3', '\x2', '\x2', '\x2', 'g', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'g', 'h', '\x3', '\x2', '\x2', '\x2', 'h', '\x19', '\x3', '\x2', '\x2', 
		'\x2', 'i', 'g', '\x3', '\x2', '\x2', '\x2', 'j', 'l', '\n', '\x4', '\x2', 
		'\x2', 'k', 'j', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', '\x2', 
		'\x2', 'm', 'n', '\x3', '\x2', '\x2', '\x2', 'm', 'k', '\x3', '\x2', '\x2', 
		'\x2', 'n', '\x1B', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\a', '\x3', 
		'\x2', '\x2', 'p', 'r', '\x5', '\x1E', '\x10', '\x2', 'q', 'o', '\x3', 
		'\x2', '\x2', '\x2', 'r', 's', '\x3', '\x2', '\x2', '\x2', 's', 'q', '\x3', 
		'\x2', '\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', '\x2', 't', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x5', ' ', '\x11', '\x2', 'v', 
		'w', '\a', '\x6', '\x2', '\x2', 'w', 'x', '\x5', '\"', '\x12', '\x2', 
		'x', 'y', '\x5', '$', '\x13', '\x2', 'y', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', 'z', '{', '\a', '(', '\x2', '\x2', '{', '}', '\a', '\x6', '\x2', 
		'\x2', '|', 'z', '\x3', '\x2', '\x2', '\x2', '}', '\x80', '\x3', '\x2', 
		'\x2', '\x2', '~', '|', '\x3', '\x2', '\x2', '\x2', '~', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x7F', '\x81', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'~', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\a', '(', '\x2', '\x2', 
		'\x82', '!', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\a', '(', '\x2', 
		'\x2', '\x84', '#', '\x3', '\x2', '\x2', '\x2', '\x85', '\x91', '\a', 
		'\x19', '\x2', '\x2', '\x86', '\x87', '\x5', '&', '\x14', '\x2', '\x87', 
		'\x8E', '\a', '(', '\x2', '\x2', '\x88', '\x89', '\a', '\a', '\x2', '\x2', 
		'\x89', '\x8A', '\x5', '&', '\x14', '\x2', '\x8A', '\x8B', '\a', '(', 
		'\x2', '\x2', '\x8B', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x88', 
		'\x3', '\x2', '\x2', '\x2', '\x8D', '\x90', '\x3', '\x2', '\x2', '\x2', 
		'\x8E', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8F', '\x3', '\x2', 
		'\x2', '\x2', '\x8F', '\x92', '\x3', '\x2', '\x2', '\x2', '\x90', '\x8E', 
		'\x3', '\x2', '\x2', '\x2', '\x91', '\x86', '\x3', '\x2', '\x2', '\x2', 
		'\x91', '\x92', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\x3', '\x2', 
		'\x2', '\x2', '\x93', '\x94', '\a', '\x1A', '\x2', '\x2', '\x94', '%', 
		'\x3', '\x2', '\x2', '\x2', '\x95', '\x9B', '\a', '(', '\x2', '\x2', '\x96', 
		'\x9C', '\a', '\b', '\x2', '\x2', '\x97', '\x98', '\a', '\t', '\x2', '\x2', 
		'\x98', '\x9C', '\a', '!', '\x2', '\x2', '\x99', '\x9A', '\a', '\x1B', 
		'\x2', '\x2', '\x9A', '\x9C', '\a', '\x1C', '\x2', '\x2', '\x9B', '\x96', 
		'\x3', '\x2', '\x2', '\x2', '\x9B', '\x97', '\x3', '\x2', '\x2', '\x2', 
		'\x9B', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\x3', '\x2', 
		'\x2', '\x2', '\x9C', '\'', '\x3', '\x2', '\x2', '\x2', '\xF', '+', '\x32', 
		'\x35', 'S', 'X', '\x63', 'g', 'm', 's', '~', '\x8E', '\x91', '\x9B',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
